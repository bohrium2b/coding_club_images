# Build Stage
FROM ubuntu:20.04 as builder

# Build-time variables
ARG DEBIAN_FRONTEND=noninteractive
ARG BUILDARCH

# Install dependencies
RUN apt-get update && \
    apt-get install -y git curl wget ca-certificates build-essential


# Install node.js 22.x
RUN curl --location https://raw.githubusercontent.com/tj/n/master/bin/n --output /usr/local/bin/n && \
    chmod +x /usr/local/bin/n && \
    n 22.6.0

# Install Node.js packages
RUN npm install -g http-server 

# Install Python Dependencies
RUN apt update && \
    apt install --no-install-recommends --no-install-suggests --yes \
    build-essential ca-certificates curl git \
    libssl-dev libbz2-dev libreadline-dev libsqlite3-dev \
    llvm libncursesw5-dev libxml2-dev libxmlsec1-dev libffi-dev liblzma-dev \
    make tk-dev unzip wget xz-utils zlib1g-dev

# Install Python 3.12.x
# https://www.python.org/downloads/
RUN cd /tmp && \
    curl --remote-name https://www.python.org/ftp/python/3.12.8/Python-3.12.8.tgz && \
    tar xzf Python-3.12.8.tgz && \
    rm --force Python-3.12.8.tgz && \
    cd Python-3.12.8 && \
    CFLAGS="-Os" ./configure --disable-static --enable-optimizations --enable-shared --with-lto --without-tests && \
    ./configure && \
    make && \
    make install && \
    cd .. && \
    rm --force --recursive Python-3.12.8 && \
    ln --relative --symbolic /usr/local/bin/pip3 /usr/local/bin/pip && \
    ln --relative --symbolic /usr/local/bin/python3 /usr/local/bin/python && \
    pip3 install --no-cache-dir --upgrade pip

# Install SQLite 3.4x
# https://www.sqlite.org/download.html
# https://www.sqlite.org/howtocompile.html#compiling_the_command_line_interface
COPY shell.c.patch /tmp
RUN cd /tmp && \
    curl --remote-name https://www.sqlite.org/2024/sqlite-amalgamation-3470200.zip && \
    unzip sqlite-amalgamation-3470200.zip && \
    rm --force sqlite-amalgamation-3470200.zip && \
    cd sqlite-amalgamation-3470200 && \
    gcc -D HAVE_READLINE -D SQLITE_DEFAULT_FOREIGN_KEYS=1 -D SQLITE_OMIT_DYNAPROMPT=1 shell.c sqlite3.c -lpthread -ldl -lm -lreadline -lncurses -o /usr/local/bin/sqlite3 && \
    cd .. && \
    rm --force --recursive sqlite-amalgamation-3470200 && \
    rm --force /tmp/shell.c.patch


# Final Stage
FROM ubuntu:20.04
LABEL maintainer="dzm2026@gmail.com"
ARG DEBIAN_FRONTEND=noninteractive

# Copy files from builder
COPY --from=builder /opt /opt
COPY --from=builder /usr/local /usr/local

# Avoid "delaying package configuration, since apt-utils is not installed"
# Install locales
RUN apt update && \
    apt install --no-install-recommends --no-install-suggests --yes \
        apt-utils \
        locales && \
    locale-gen \
        en_US.utf8 \
        zh_CN.utf8 \
        zh_TW.utf8 \
        fr_FR.utf8 \
        de_DE.utf8 \
        it_IT.utf8 \
        es_ES.utf8 \
        ja_JP.utf8 \
        ko_KR.utf8 \
        ru_RU.utf8 \
        pt_BR.utf8 \
        tr_TR.utf8 \
        pl_PL.utf8 \
        cs_CZ.utf8 \
        hu_HU.utf8 \
        bg_BG.UTF-8
ENV LANG=C.UTF-8

# Install packages
# Install Ubuntu packages
RUN apt update && \
    apt upgrade --yes && \
    apt install --no-install-recommends --no-install-suggests --yes \
        astyle \
        bash-completion \
        build-essential `# dpkg-dev, libc, gcc, g++, make, etc.`\
        ca-certificates \
        clang \
        clang-format \
        coreutils `# For fold` \
        curl \
        dos2unix \
        dnsutils `# For nslookup` \
        fonts-noto-color-emoji `# For render50` \
        gdb \
        git \
        git-lfs \
        jq \
        less \
        libclang-rt-18-dev `# For clang` \
        liblapack3 `# For R` \
        libmagic-dev `# For style50` \
        libncurses-dev \
        libpango-1.0-0 libharfbuzz0b libpangoft2-1.0-0 `# For render50` \
        libpangocairo-1.0-0 `# For R` \
        libtiff5 `# For R` \
        libxt6 `# For R` \
        man \
        man-db \
        nano \
        openssh-client `# For ssh-keygen` \
        psmisc `# For fuser` \
        sudo \
        tzdata `# For TZ` \
        unzip \
        valgrind \
        vim \
        wget \
        zip \
        zlib1g-dev `# For bundle` && \
    apt clean

# Add user
RUN useradd --home-dir /home/user --create-home --shell /bin/bash user && \
    echo "user ALL=(ALL) NOPASSWD: ALL" >> /etc/sudoers && \
    umask 0077 && \
    chown -R user:user /home/user && \
    echo "export PATH=$PATH:/home/user/.local/bin" >> /home/user/.bashrc && \
    echo "Defaults umask_override" >> /etc/sudoers && \
    echo "Defaults umask=0022" >> /etc/sudoers

# Set user
USER user
WORKDIR /home/user
ENV WORKDIR=/home/user